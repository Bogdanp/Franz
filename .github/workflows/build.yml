on: [push]
name: Build
jobs:
  build:
    runs-on: macos-12
    name: Build on macOS 12
    steps:
      - uses: actions/checkout@master
      - uses: Bogdanp/setup-racket@v1.10
        with:
          architecture: 'x64'
          distribution: 'full'
          variant: 'CS'
          version: '8.10'
          packages: http-easy-lib,raco-cross-lib
      - name: Install Noise
        run: |
          mkdir ../../sandbox
          git clone --depth 1 --branch racket-8.10 https://github.com/Bogdanp/Noise ../../sandbox/Noise
          raco pkg install -D --batch --auto ../../sandbox/noise/Racket/noise-serde-lib/
      - name: Build Noise
        run: make
        working-directory: ../../sandbox/Noise
      - name: Prepare secrets
        run: |
          echo -n "$LICENSE_SECRET" | base64 --decode -o core/secrets/license-secret.txt
          echo -n "$SENTRY_DSN" | base64 --decode -o core/secrets/sentry-dsn.txt
        env:
          LICENSE_SECRET: ${{ secrets.LICENSE_SECRET }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      - name: Install core
        run: raco pkg install -D --batch --auto --name franz core/
      - name: Build manual
        run: make FranzCocoa/resources/manual/index.html
      - name: Build core x86_64
        run: make
      - name: Build core arm64
        run: |
          raco cross \
            --target aarch64-macosx \
            --version 8.10 \
            -- pkg install -D --batch --auto ../../sandbox/Noise/Racket/noise-serde-lib/
          raco cross \
            --target aarch64-macosx \
            --version 8.10 \
            -- pkg install -D --batch --auto --name franz core/
          raco cross \
            --target aarch64-macosx \
            --version 8.10 \
            -- \
            ctool \
            ++lang lua \
            ++lib lua/lang/runtime-config \
            ++lib racket/runtime-config \
            --runtime FranzCocoa/resources/runtime-arm64 \
            --runtime-access runtime-arm64 \
            --mods FranzCocoa/resources/core-arm64.zo core/main.rkt
      - name: Show your work
        run: find FranzCocoa/resources
      - name: Install Apple Certificate
        run: |
          # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
          MAC_DEV_CER_PATH=$RUNNER_TEMP/madev.p12
          DEVELOPER_ID_CER_PATH=$RUNNER_TEMP/devid.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$MAC_DEV_CER" | base64 --decode -o $MAC_DEV_CER_PATH
          echo -n "$DEVELOPER_ID_CER" | base64 --decode -o $DEVELOPER_ID_CER_PATH
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $MAC_DEV_CER_PATH -P "$MAC_DEV_CER_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $DEVELOPER_ID_CER_PATH -P "$DEVELOPER_ID_CER_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
        env:
          DEVELOPER_ID_CER: ${{ secrets.DEVELOPER_ID_CER }}
          DEVELOPER_ID_CER_PASSWORD: ${{ secrets.DEVELOPER_ID_CER_PASSWORD }}
          MAC_DEV_CER: ${{ secrets.MAC_DEV_CER }}
          MAC_DEV_CER_PASSWORD: ${{ secrets.MAC_DEV_CER_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      - name: Build Franz.app
        run: |
          mkdir -p dist
          xcodebuild \
            archive \
            -project FranzCocoa.xcodeproj/ \
            -scheme Franz \
            -destination 'generic/platform=macOS' \
            -archivePath dist/Franz.xcarchive
          xcodebuild \
            -exportArchive \
            -archivePath dist/Franz.xcarchive \
            -exportOptionsPlist export.plist \
            -exportPath dist/ \
            -allowProvisioningUpdates
          npx create-dmg dist/Franz.app dist/
          mv dist/Franz*.dmg dist/Franz.dmg
      - name: Notarize Franz.dmg
        run: |
          xcrun notarytool submit \
            --team-id 'H3YE679B58' \
            --apple-id 'bogdan@defn.io' \
            --password "$NOTARY_PASSWORD" \
            --wait \
            dist/Franz.dmg
          xcrun stapler staple dist/Franz.dmg
        env:
          NOTARY_PASSWORD: ${{ secrets.NOTARY_PASSWORD }}
      - name: Upload Franz.dmg
        uses: actions/upload-artifact@v3
        with:
          name: Franz.dmg
          path: dist/Franz.dmg
